#!/usr/bin/env python
# coding: utf-8

# In[1]:
import networkx as nx
import numpy as np
from functools import reduce
import pandas as pd
import matplotlib.pyplot as plt

# In[2]:
# load the graph
df = pd.read_csv('Network_Inteaction.csv')
print(df) 

# In[3]:
# visualize the graph
plt.figure(figsize =(10, 8)) #10= width & 8=Length
G = nx.from_pandas_edgelist(df, 'node1', 'node2')
nx.draw(G, with_labels = True)

# In[4]:
print(nx.info(G))

# In[5]:

#plt.figure(figsize =(10, 8)) #10= width & 8=Length
#nx.draw_networkx(G, with_labels = True)

# In[6]:

#Calculating degree centrality
DC=nx.degree_centrality(G)
DC

# In[7]:

#Sorted Degree centrality of top 20 nodes
sorted_DC = sorted(DC, key = DC.get,reverse = True)[0:20]
sorted_DC

# In[8]:

#Calculating Betweenness centrality
BC=nx.betweenness_centrality(G)
BC

# In[9]:

#Sorted BC of top 20 nodes
sorted_BC = sorted(BC, key = BC.get,reverse = True)[0:20]
sorted_BC

# In[10]:

#Calculating Closeness centrality
CC=nx.closeness_centrality(G)
CC

# In[11]:

#Sorted CC of top 20 nodes
sorted_CC = sorted(CC, key = CC.get,reverse = True)[0:20]
sorted_CC

# In[12]:

#Calculating Eigenvector centrality
EC=nx.eigenvector_centrality(G)
EC

# In[24]:

#Sorted EC of top 20 nodes
sorted_EC = sorted(EC, key = EC.get,reverse = True)[0:20]
sorted_EC

# In[17]:

#def intersection(lst1, lst2):
#    lst3 = [value for value in sorted_DC if value in sorted_BC]
#    return lst3

# In[18]:

#print(intersection(sorted_DC, sorted_BC))

# In[25]:

# apply intersect1d to (a list of) multiple lists:
reduce(np.intersect1d, [sorted_DC, sorted_BC, sorted_CC, sorted_EC])
